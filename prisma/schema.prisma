generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("PRISMA_DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  emailVerified DateTime?
  name          String?
  password      String?
  image         String?
  role          UserRole     @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  favorites     Favorite[]
  inquiries     Inquiry[]
  rentals       Rental[]
  rentalItems   RentalItem[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RentalItem {
  id          Int             @id @default(autoincrement())
  title       String
  category    ProductCategory
  price       Float
  image       String[]
  condition   ItemCondition
  available   Boolean         @default(true)
  rating      Float           @default(0)
  location    String
  features    String[]
  description String
  minRentDays Int             @default(1)
  maxRentDays Int             @default(30)
  deposit     Float?
  rules       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String
  favorites   Favorite[]
  inquiries   Inquiry[]
  rentals     Rental[]
  user        User            @relation(fields: [userId], references: [id])
  reviews     Review[]
}

model Rental {
  id           String       @id @default(cuid())
  startDate    DateTime
  endDate      DateTime
  totalPrice   Float
  status       RentalStatus @default(PENDING)
  deposit      Float?
  notes        String?
  createdAt    DateTime     @default(now())
  rentalItemId Int
  userId       String
  rentalItem   RentalItem   @relation(fields: [rentalItemId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

model Favorite {
  id           String     @id @default(cuid())
  userId       String
  createdAt    DateTime   @default(now())
  rentalItemId Int
  rentalItem   RentalItem @relation(fields: [rentalItemId], references: [id])
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, rentalItemId])
}

model Inquiry {
  id           String     @id @default(cuid())
  name         String
  email        String
  phone        String?
  message      String
  createdAt    DateTime   @default(now())
  userId       String?
  rentalItemId Int
  rentalItem   RentalItem @relation(fields: [rentalItemId], references: [id])
  user         User?      @relation(fields: [userId], references: [id])
}

model Review {
  id           String     @id @default(cuid())
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  rentalItemId Int
  rentalItem   RentalItem @relation(fields: [rentalItemId], references: [id])
}

model Service {
  id          Int             @id @default(autoincrement())
  name        String
  category    ServiceCategory
  description String
  price       Float
  available   Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

enum ProductCategory {
  BOATS
  EQUIPMENT
  FASHION
  ELECTRONICS
  SPORTS
  PARTY
  TRAVEL
  HOME
  OTHER
}

enum ItemCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
}

enum RentalStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ServiceCategory {
  DELIVERY
  SETUP
  TRAINING
  MAINTENANCE
  CLEANING
  INSURANCE
  OTHER
}